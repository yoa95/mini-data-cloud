syntax = "proto3";

package minicloud.execution;

option java_package = "com.minicloud.proto.execution";
option java_outer_classname = "QueryExecutionProto";

import "common.proto";
import "google/protobuf/timestamp.proto";

// Main query execution service for control plane <-> worker communication
service QueryExecutionService {
    // Execute a query stage on this worker
    rpc ExecuteStage(ExecuteStageRequest) returns (ExecuteStageResponse);
    
    // Stream query progress updates
    rpc StreamProgress(ExecuteStageRequest) returns (stream ProgressUpdate);
    
    // Health check and resource reporting
    rpc ReportHealth(HealthRequest) returns (HealthResponse);
    
    // Cancel running query
    rpc CancelQuery(CancelQueryRequest) returns (CancelQueryResponse);
}

// Worker management service for control plane
service WorkerManagementService {
    // Register a new worker with the control plane
    rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse);
    
    // Deregister a worker from the control plane
    rpc DeregisterWorker(DeregisterWorkerRequest) returns (DeregisterWorkerResponse);
    
    // Send periodic heartbeat from worker to control plane
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    
    // List all registered workers (for control plane internal use)
    rpc ListWorkers(ListWorkersRequest) returns (ListWorkersResponse);
}

message ExecuteStageRequest {
    string query_id = 1;
    int32 stage_id = 2;
    ExecutionStage stage = 3;
    map<string, string> session_properties = 4;
    string trace_id = 5;
}

message ExecutionStage {
    int32 stage_id = 1;
    StageType type = 2;
    repeated minicloud.common.DataPartition input_partitions = 3;
    PartitioningScheme output_partitioning = 4;
    bytes serialized_plan = 5;  // Serialized execution plan (Calcite JSON or Substrait)
    string plan_format = 6;     // "CALCITE_JSON" or "ARROW_SUBSTRAIT"
}

enum StageType {
    SCAN = 0;
    FILTER = 1;
    PROJECT = 2;
    JOIN = 3;
    AGGREGATE = 4;
    EXCHANGE = 5;
    SORT = 6;
    LIMIT = 7;
}

message PartitioningScheme {
    PartitionType type = 1;
    repeated string partition_columns = 2;
    int32 partition_count = 3;
}

enum PartitionType {
    SINGLE = 0;
    HASH = 1;
    RANGE = 2;
    ROUND_ROBIN = 3;
}

message ExecuteStageResponse {
    string query_id = 1;
    int32 stage_id = 2;
    ExecutionStatus status = 3;
    string result_location = 4;  // Arrow Flight endpoint for results
    minicloud.common.ExecutionStats stats = 5;
    string error_message = 6;
    string trace_id = 7;
}

enum ExecutionStatus {
    SUBMITTED = 0;
    RUNNING = 1;
    COMPLETED = 2;
    FAILED = 3;
    CANCELLED = 4;
}

message ProgressUpdate {
    string query_id = 1;
    int32 stage_id = 2;
    ExecutionStatus status = 3;
    double progress_percentage = 4;
    minicloud.common.ExecutionStats current_stats = 5;
    google.protobuf.Timestamp timestamp = 6;
}

message HealthRequest {
    string worker_id = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message HealthResponse {
    minicloud.common.WorkerInfo worker_info = 1;
    minicloud.common.StandardResponse response = 2;
}

message CancelQueryRequest {
    string query_id = 1;
    string reason = 2;
}

message CancelQueryResponse {
    string query_id = 1;
    bool cancelled = 2;
    minicloud.common.StandardResponse response = 3;
}

// Worker registration messages
message RegisterWorkerRequest {
    string worker_id = 1;
    string endpoint = 2;  // gRPC endpoint (host:port)
    minicloud.common.ResourceInfo resources = 3;
    map<string, string> metadata = 4;  // Additional worker metadata
}

message RegisterWorkerResponse {
    bool registered = 1;
    string assigned_worker_id = 2;  // May be different from requested ID
    minicloud.common.StandardResponse response = 3;
}

message DeregisterWorkerRequest {
    string worker_id = 1;
    string reason = 2;  // Reason for deregistration (shutdown, error, etc.)
}

message DeregisterWorkerResponse {
    bool deregistered = 1;
    minicloud.common.StandardResponse response = 2;
}

message HeartbeatRequest {
    string worker_id = 1;
    minicloud.common.ResourceInfo current_resources = 2;
    google.protobuf.Timestamp timestamp = 3;
    map<string, string> status_metadata = 4;
}

message HeartbeatResponse {
    bool acknowledged = 1;
    minicloud.common.WorkerStatus expected_status = 2;  // Control plane can request status change
    map<string, string> instructions = 3;  // Additional instructions for worker
    minicloud.common.StandardResponse response = 4;
}

message ListWorkersRequest {
    minicloud.common.WorkerStatus status_filter = 1;  // Optional filter by status
    int32 limit = 2;
    string page_token = 3;
}

message ListWorkersResponse {
    repeated minicloud.common.WorkerInfo workers = 1;
    string next_page_token = 2;
    minicloud.common.StandardResponse response = 3;
}